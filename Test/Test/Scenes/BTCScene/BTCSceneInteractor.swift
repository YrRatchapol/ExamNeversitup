//
//  BTCSceneInteractor.swift
//  Test
//
//  Created by Ratchapol Pattarakanoksiri on 17/5/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BTCSceneBusinessLogic {
    func doGetBTCRate(request: BTCScene.GetBTC.Request)
}

protocol BTCSceneDataStore {
    var BTCRateList: [CurrentPriceResponse] { get set }
    func getBTCHistory(currencyEnum: CurrencyTypeEnum) -> [BTCHistoryModel]
}

class BTCSceneInteractor: BTCSceneBusinessLogic, BTCSceneDataStore {
    var presenter: BTCScenePresentationLogic?
    var worker: BTCSceneWorker?
    
    var BTCRateList: [CurrentPriceResponse] = []
    
    // MARK: Do something
    
    func doGetBTCRate(request: BTCScene.GetBTC.Request) {
        let request = CurrentPriceRequest()
        Network.getRequest(request: request) { (response: CurrentPriceResponse) in
            self.BTCRateList.append(response)
            let response = BTCScene.GetBTC.Response(btcRate: self.BTCRateList.last)
            self.presenter?.presentGetBTC(response: response)
        } failureBlock: { error in
            print(error.localizedDescription)
        }
    }
    
    func getBTCHistory(currencyEnum: CurrencyTypeEnum) -> [BTCHistoryModel] {
        var result: [BTCHistoryModel] = []
        for data in BTCRateList {
            if currencyEnum == .usd {
                let model = BTCHistoryModel(title: data.bpi?.usd?.rateDisplay,
                                            dateTime: data.time?.updated)
                result.append(model)
            } else if currencyEnum == .gbp {
                let model = BTCHistoryModel(title: data.bpi?.gbp?.rateDisplay,
                                            dateTime: data.time?.updated)
                result.append(model)
            } else if currencyEnum == .eur {
                let model = BTCHistoryModel(title: data.bpi?.eur?.rateDisplay,
                                            dateTime: data.time?.updated)
                result.append(model)
            }
        }
        return result
    }
}
