//
//  BTCSceneViewController.swift
//  Test
//
//  Created by Ratchapol Pattarakanoksiri on 17/5/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BTCSceneDisplayLogic: class {
    func displayGetBTC(viewModel: BTCScene.GetBTC.ViewModel)
}

class BTCSceneViewController: UIViewController, BTCSceneDisplayLogic {
    var interactor: BTCSceneBusinessLogic?
    var router: (NSObjectProtocol & BTCSceneRoutingLogic & BTCSceneDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = BTCSceneInteractor()
        let presenter = BTCScenePresenter()
        let router = BTCSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBOutlet weak var mainStack: UIStackView!
    
    @IBOutlet weak var usdTitleLabel: UILabel!
    @IBOutlet weak var usdDescriptionLabel: UILabel!
    @IBOutlet weak var usdRateLabel: UILabel!
    
    @IBOutlet weak var gbpTitleLabel: UILabel!
    @IBOutlet weak var gbpDescriptionLabel: UILabel!
    @IBOutlet weak var gbpRateLabel: UILabel!
    
    @IBOutlet weak var eurTitleLabel: UILabel!
    @IBOutlet weak var eurDescriptionLabel: UILabel!
    @IBOutlet weak var eurRateLabel: UILabel!
    
    var timer: Timer?
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        mainStack.isHidden = true
        
        timer = Timer.scheduledTimer(timeInterval: 60, target: self, selector: #selector(ticker), userInfo: nil, repeats: true)
        doGetBTC()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)

        if self.isMovingFromParent {
            timer?.invalidate()
            timer = nil
        }
    }
    
    @objc func ticker() {
        doGetBTC()
    }
    
    // MARK: Do something
    
    func doGetBTC() {
        let request = BTCScene.GetBTC.Request()
        interactor?.doGetBTCRate(request: request)
    }
    
    func displayGetBTC(viewModel: BTCScene.GetBTC.ViewModel) {
        mainStack.isHidden = false
        
        usdTitleLabel.text = viewModel.usdTitle
        usdDescriptionLabel.text = viewModel.usdDescription
        usdRateLabel.text = viewModel.usdRate
        
        gbpTitleLabel.text = viewModel.gbpTitle
        gbpDescriptionLabel.text = viewModel.gbpDescription
        gbpRateLabel.text = viewModel.gbpRate
        
        eurTitleLabel.text = viewModel.eurTitle
        eurDescriptionLabel.text = viewModel.eurDescription
        eurRateLabel.text = viewModel.eurRate
    }
}
